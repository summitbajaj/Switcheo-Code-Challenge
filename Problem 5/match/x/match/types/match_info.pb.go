// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match/match/match_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MatchInfo struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Matchdate string `protobuf:"bytes,2,opt,name=matchdate,proto3" json:"matchdate,omitempty"`
	Home      string `protobuf:"bytes,3,opt,name=home,proto3" json:"home,omitempty"`
	Away      string `protobuf:"bytes,4,opt,name=away,proto3" json:"away,omitempty"`
	Creator   string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Stadium   string `protobuf:"bytes,6,opt,name=stadium,proto3" json:"stadium,omitempty"`
	Spectator int32  `protobuf:"varint,7,opt,name=spectator,proto3" json:"spectator,omitempty"`
}

func (m *MatchInfo) Reset()         { *m = MatchInfo{} }
func (m *MatchInfo) String() string { return proto.CompactTextString(m) }
func (*MatchInfo) ProtoMessage()    {}
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_132363c566d80c4a, []int{0}
}
func (m *MatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchInfo.Merge(m, src)
}
func (m *MatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *MatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MatchInfo proto.InternalMessageInfo

func (m *MatchInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MatchInfo) GetMatchdate() string {
	if m != nil {
		return m.Matchdate
	}
	return ""
}

func (m *MatchInfo) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

func (m *MatchInfo) GetAway() string {
	if m != nil {
		return m.Away
	}
	return ""
}

func (m *MatchInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MatchInfo) GetStadium() string {
	if m != nil {
		return m.Stadium
	}
	return ""
}

func (m *MatchInfo) GetSpectator() int32 {
	if m != nil {
		return m.Spectator
	}
	return 0
}

func init() {
	proto.RegisterType((*MatchInfo)(nil), "match.match.MatchInfo")
}

func init() { proto.RegisterFile("match/match/match_info.proto", fileDescriptor_132363c566d80c4a) }

var fileDescriptor_132363c566d80c4a = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0x4d, 0x2c, 0x49,
	0xce, 0xd0, 0x47, 0x22, 0xe3, 0x33, 0xf3, 0xd2, 0xf2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xb8, 0xc1, 0x22, 0x7a, 0x60, 0x52, 0x69, 0x33, 0x23, 0x17, 0xa7, 0x2f, 0x88, 0xe5, 0x99, 0x97,
	0x96, 0x2f, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x94,
	0x99, 0x22, 0x24, 0xc3, 0xc5, 0x09, 0x56, 0x96, 0x92, 0x58, 0x92, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8,
	0xc1, 0x19, 0x84, 0x10, 0x10, 0x12, 0xe2, 0x62, 0xc9, 0xc8, 0xcf, 0x4d, 0x95, 0x60, 0x06, 0x4b,
	0x80, 0xd9, 0x20, 0xb1, 0xc4, 0xf2, 0xc4, 0x4a, 0x09, 0x16, 0x88, 0x18, 0x88, 0x2d, 0x24, 0xc1,
	0xc5, 0x9e, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x5f, 0x24, 0xc1, 0x0a, 0x16, 0x86, 0x71, 0x41, 0x32,
	0xc5, 0x25, 0x89, 0x29, 0x99, 0xa5, 0xb9, 0x12, 0x6c, 0x10, 0x19, 0x28, 0x17, 0x64, 0x73, 0x71,
	0x41, 0x6a, 0x72, 0x09, 0x58, 0x17, 0xbb, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x42, 0xc0, 0x49, 0xf7,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x84, 0x21, 0x9e, 0xae, 0x80, 0x7a,
	0xbe, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x71, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x68, 0x71, 0xa7, 0xff, 0x18, 0x01, 0x00, 0x00,
}

func (m *MatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spectator != 0 {
		i = encodeVarintMatchInfo(dAtA, i, uint64(m.Spectator))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Stadium) > 0 {
		i -= len(m.Stadium)
		copy(dAtA[i:], m.Stadium)
		i = encodeVarintMatchInfo(dAtA, i, uint64(len(m.Stadium)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMatchInfo(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Away) > 0 {
		i -= len(m.Away)
		copy(dAtA[i:], m.Away)
		i = encodeVarintMatchInfo(dAtA, i, uint64(len(m.Away)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Home) > 0 {
		i -= len(m.Home)
		copy(dAtA[i:], m.Home)
		i = encodeVarintMatchInfo(dAtA, i, uint64(len(m.Home)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Matchdate) > 0 {
		i -= len(m.Matchdate)
		copy(dAtA[i:], m.Matchdate)
		i = encodeVarintMatchInfo(dAtA, i, uint64(len(m.Matchdate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMatchInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatchInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatchInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMatchInfo(uint64(m.Id))
	}
	l = len(m.Matchdate)
	if l > 0 {
		n += 1 + l + sovMatchInfo(uint64(l))
	}
	l = len(m.Home)
	if l > 0 {
		n += 1 + l + sovMatchInfo(uint64(l))
	}
	l = len(m.Away)
	if l > 0 {
		n += 1 + l + sovMatchInfo(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMatchInfo(uint64(l))
	}
	l = len(m.Stadium)
	if l > 0 {
		n += 1 + l + sovMatchInfo(uint64(l))
	}
	if m.Spectator != 0 {
		n += 1 + sovMatchInfo(uint64(m.Spectator))
	}
	return n
}

func sovMatchInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatchInfo(x uint64) (n int) {
	return sovMatchInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stadium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stadium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spectator", wireType)
			}
			m.Spectator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spectator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatchInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatchInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatchInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatchInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatchInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatchInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatchInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatchInfo = fmt.Errorf("proto: unexpected end of group")
)
